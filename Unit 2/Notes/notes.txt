SASS 101:
    - SASS is exactly like what we have been doing in CSS but better.
    - We are able to nest styles, define variables easier and do inline caclculations easier.

    Creating .scss Files
        - Sass is just a type of scss but it is the most commonly used one and you are able to use both style.scss and style.sass.
        - Almost everyone uses SCSS and we are too but if you are working alone don't be afraid to try it out.

    Compiling SCSS
        - Websites can't run on scss so we will need to compile it down to a css file in order to use it on the HTML
        - We are going ot download an extension to do this.

    Variables
        - You could make variables before but they were kind of annoying and you needed to create them in root.
        - Now you cna make them anywhere isng the dollar sign.
        Ex.
        $main-color: lightblue;
        $font-stack: Helvetica, sans-serif;
        $border-color: #333;

    Nesting
        - We no longer have to declare each and every element on the way too the one that we want to edit.
        - We can use nesting to refer tochild elements (just like every other coding language) and the scss will compile into the proper references.
    
    Nesting Similar Properties
        - Some properites are very similar to one another for examples padding-left, padding-right, padding-bottom, padding-top.
        - SCSS can group these through nesting, making it easier for us.
        Ex.
        padding: {
            top: 5px;
            right: 0px;
            left: 50px;
        }

    & with Pseudo Classes
        - Creating pseudo classed (:active, :focus, :hover, etc.) is also made easeir by using the front of the pseudo class that you want to add.
        Ex.
        .button {
            &visited {
                background {
                    background-color: red;
                }
                &:hover {
                    background-color: yellow;
                }
                &:active {
                    background-color: green;
                }
            }

    Maps
        - We can create maps similar to objects in js except with parenthesis.
        - They are set up with an object name and then corresponding key: value pairs.
        Ex.
        $font-weight {
            'small': 300,
            'medium': 500,
            'large: 700,
        };

    map-get
        - Using these can be a little tedious but it is still good practice to get used to these for larger sites.
        - To use these maps you need to use the mao-get method in your scss.
        Ex.
        font: map-get($font-weight, small);
        font: map-get($map: $font-weight, $key: small);

    Functions
        - That map-get is kinda clunky and can get really annoying to use so most scss coders will use functions to fix that.
        - To create a function in scss you use the @ function rule.
        Ex.
        @function weight($name) {
            @return map-get($font-weight, $name);
        };
        div {
            font: weight(bold);
        }

    Mixins
        - These are kind of like partials but theya re used in line and not in another file.
        - You create a mixin using the @mixin rule and then you can call it by using @include rule.

    Common Mixins
        - There are many bits of code that we need to type too often, for example for example do to flex we need to do:
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: row;
        - Mixins help with this because they allow us to write it one time and then @include it as many times as we want.
        Ex.
        @mixin flexCenter($direction) {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: $direction;
        }
        @include flexCenter(row);

    Dark Theme Mixin
        - This is for coding only and will not update live on the page but here is an example of a mixin.
        Ex.
        @mixin theme($dark-theme: true) {
            @if $dark-theme {
                background: darken($main-color, 100%);
                color: lighten($text-color, 100%);
            }
        }
        .dark {
            @include theme(true);
        }

    Caclculations
        - We are able to use calc() in css but in scss you can just do calculations without a method.
        Ex.
        width: 50% - 4% // 46%

    Extending Container
        - If you want 2 things t ohave all the smae properties as each other you can use the @extend rule and it will clone all of the same css properties, then you can modify what you want after it.
        Ex.
        #submit {
            @extend #testing;
            &:hover{background-color: black;}
        }


jQuery 101
- jQuery is a javascript library that allows us to navigate the DOM and implement animations adn events easier then base JS.
- jQuery is used very often and by thousands of companies

    Proper Installing jQuery
        - jQuery is not like SASS, it cannot be installed globally and still be expected to work.
        - Sinec javascript is a library that is being executed on the client side when the page runs it won't be able to run the site if it doesn't have jQuery installed.
    CDN
        - In order to get these libraries out to everyone that needs it, we use a system called a CDN or Content Delivery Network.
        - This is a simple way to import your library with a link and then it is downloaded on the user's computer when they enter the site.
    Finding the CDN
        - In case you didn't find it look up jQuery CDN on google and it's the first link.
    The jQuery Structure
        - jQuery is written very similar to js with a few key differences. They use $(); to grab values and then .methods to act on it.
        Ex.
        $(document).ready();
    Container for jQuery
        - Before you code any jQuery you need to wrap it in a container that will make sure the html is loaded.
        Ex.
        $(document).ready(function () {
            // Code
        });
    Shorthand
        - This is done at the beginning of ever jQuery so coders got tired oftyping and now ther is shortand for it.
        Ex.
        $(function () {});
    Using jQuery
        - Here is an example of code that will hide a panel. I'll explain it a little more on the next slide.
        Ex.
        $(function()) {
            $(#panel1).hide(1000);
        }
        - We access the panel using the id just like css but with a $().
        - This .hide is a jQuery method and (1000) a how long it will take to do this action in milliseconds.
    Chaining
        - EVERYTHING in jQuery is done using methods like .hide.
        - Because of this we can chain together many methods in row as we want.
        Ex.
        $('#panel1').hide(1000).show(1000).hide(1000);
    Toggling
        - Commmands like show and hide will only work in one collection, meaning if it is already hidden it won't show.
        - This means you will need a button to show and another button to hide.
        - This is fixed by the addition of toggle.
        - Almost every action in jQuery has a toggle ability.
        - If it is hidden then it will show and vise versa.
        Ex.
        $('#panel1').toggle(1000);
    Changing CSS
        - Easier than ever with the CSS method.
        - By saying .css({}) the code will compile and do the style.property for you.
        Ex.
        $('#panel1').css({
            'color': 'red',
            'font-weight': "900"
        });
    Changing HTML
        - Also very easy with the .html().
        Ex.
        $('#button1').html('new Text');
    Event Binding
        - jQuery also helps with event listeners.
        - We no longer need tot ype out .addEventListener every time we want to add one we can use ".on".
        Ex.
        $('#button1').on('event', function(){});
        $('#button1').on('click', function(){
            $('#panel1').fadeToggle(1000);
        });
        - This works with any of the js events that you are used to using but now we can write ".on" instead of ".addEventListener" (it's a little easier).
    Selecting
        - Remember htat the selectors for your jQuery are the exact same as the selectors for the CSS so if you want to add an event listener to every button you can do that.
        Ex.
        $('button').on('click', function({}));
    Targeting
        - You can also add your own attributes to your html and store those in variables.
        - Using this in combination wiht basic js can make your work easier.
    Using "this" in the jQuery
        - We add an event to every button that will find the "panelid" assigned to it using this.
        - Then we combine that value with and id to choose the panel we want to toggle.
        Ex.
        $('button').on('click', function(){
            let panelId = $(this).attr('panelid');
            $('#panel' + panelId).toggle(1000);
        });
    Another Point
        - You can also add more t oyour selectors jQuery.
        - For instance if we want to change the text in the panel heading we can do that by adding to it.


DOM Traversal
    - Many tutorials will include DOM traversal, jobs will ask if you are a master of DOM and employers will require that you can access and change the elements of the DOM at will.
    - Let's learn more about DOM traversal.

    Dom (Document Object Model)
        - We talked about this at the beginning of the year when we learned about HTML but to recap.
        - DOM is how your computer builds your site based on the HTML code that you write.
        - When you access your HTML from the jQuery or the CSS you are actually moving around the DOM that was created not the actual HTML.
        - We have been using DOM traversal this whole time with ids and classes and all the selectors that we use in CSS.
        - To be a master DOM walker you must learn how to move past the basics and into the obscure.
    Basics
        - The following are all basic DOM references that you have been using in jQuery.
        Ex.
        $('button');
        $("#panel4-heading");
        $(`.panel-heading`);
        $(`.header div #button1`);
    Medium Level DOM (CSS)
        - We have used all of the following at some point, these are CSS pseudo classes and are therefore usable in the jQuery.
    Medium Level DOM (jQuery)
        - These are the same 4 selectors, but they are written in jQuery.
        Ex.
        $('div').first(); // or $('div:first');
        $('div').eq(1); // or $('div.eq(1)');
        // Active doesn't exist in jQuery, use SCSS
        $('div').hover(); // or $('div:hover');
    DOM Walker
        - To be a master DOM walker you must know hwo to traverse the most condusing DOMs and know tha pths no matter the language you are using.
    Changing Classes
        - Editing classes in js is time consuming becuase you need to access hte calss as an array an the nmodify it.
        - jQuery allows us to just use methods.
        Ex.
        $('li').on('click', function(){
            $(this).addClass('highlight');
            $(this).siblings().removeClass('highlight');
        });


    The Timing Events
        - There are only 2 adn they work very similarly.
        setInterval(function(){}, delay); - Runs continuously afte the delay.
        setTimeout(function(){}, delay); - Runs once after the delay.
    "setInterval"
        - The delay happens after every time the function happens.
        - If the function is an animation that take 2000ms and you set the delay to 2500 ms then there will be a 500 ms breka between each one.
    Saving Your Intervals
        - You want to save your interval functions in a variable so that you can reference it later to stop the loop.
        Ex.
        let interval;
        function startLoop() {
            interval = setInterval(function(){}, 1000);
        }
    "clearInterval"
        - If you want your looping function to stop then you can clear the interval and remove the loop.
        Ex.
        function soptLoop() {
            clearInterval(interval);
        }
    Wrapping it All Together
        - Then you can use those functions on events.
        Ex.
        let interval;
        function startLoop() {
            interval = setInterval(function(){}, 1000);
        }
        function stopLoop() {on
            clearInterval(interval);
        }
        $('#button1').on('click', startLoop());
        $('#button2').on('click', stopLoop());