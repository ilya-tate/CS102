OBJECT ORIENTED PROGRAMMING (OOP)
    Object oriented programming is a way of coding that allows you to create objects with properties that are cloned when you reference that object, so you don't have to type something over and over.


OOP Vocab:
    Encaspulation
        - The ability to store information inside of an object so that it is only visible to the object.
        Ex. interal computer components, gift in a box
    Abstraction
        - Hiding the internal mechanisms behind a simple interface.
        Ex. cable management, simple font
    Inheritance
        - Basing one object off another in order to retain similar implementation or properties.
        Ex. 
    Polymorphism
        - The ability to perform the same action in different ways (i.e. run() can be 2 legs or 4 legs).
        Ex. 

Objects and Object Based Programming:
    What is and Objects
        - An object (sometimes referred to as a class in other languages) is a data type just like strings and numbers but unlike those "primitive" data types they are used to store many values at once using keyed collections and more complex entries.
    How to Think About an Object
        - An object is like a wallet that stores all kinds of things. You may have aacard, that card is an ID or a debit card. You can have money which may be a single or a five. You can even use it to store things normally wouldn't go in a wallet, like lint or paper clips.
        Ex. In this example the wallet object is holding a card key with an ID value.
    How to Create an Object
        - An empty object is created using either an object constructor or and object literal.
        Ex.
        let wallet = new Object(); // This is and object constructor
        let wallet = {}; // This is and object literal
    Key:Value aka Properties
        - In order to save values in an object you need to assign them a key, kindo flike a name tag that you can refer to later to "get" the value back out.
        Ex.
        card: "Debit",
        cash: 42
        // Every key:value is seperated with a '","' and the key and value pair is seperated with a ':'.
    Assigning Values to Your Object
        - Now we can comine those two things and we end up with an object that is holding keys and values.
        Ex.
        let wallet = {
            card: "Debit",
            cash: 42
        };
    Reading Your Properties
        - In the wallet object that we made we can add, remove, and read any of the properties at any time.
        - The values are called by using the properties and keys that we defined.
        Ex.
        console.log(wallet.card); // Debit
        console.log(wallet.cash); // 42
    Adding New Properties
        - Just because a key was not added at creation, it does not mean that we can't add it later.
        - We can also add new properties similar to how we took the values out.
        Ex.
        wallet.ID = "School ID"
        console.log(wallet.ID); // School ID
    Removing Properties
        - Sometimes a card will expire, or be lost, or you will spend all your cash.
        - When this happens the property will need to be removed from the object.
        Ex.
        delete wallet.cash;
        - Rather than making the value 0 we can remove it entirely, sometimes this is preferable.
    Multi Word Properties
        - You may also use multi word properties.
        - The benefit is being able to express more complicated keys or to have a value that works easier with something a person would read.
        - This is very useful when creating databases or tables.
    Square Brackets
        - We can't add something like
            wallet.is poor = true
        - This will break the code so will
            wallet."is poor" = true
        - When creating mult word properties we need to use square brackets.
        Ex.
        wallet["is poor"] = true
        console.log(wallet ["is poor"]);
    Adding Through Prompts
        - Most likely youw ill not want to fill out an enitre object on your own, the code can do that for you.
        Ex.
        let wallet = {}
        let money = prompt("How much do you want to take out", "20");
        wallet["cash"] = money;
    Functions to Initialize/Clone
        - Many times when you want to create a new object you will pass it through a function.
        - This is best done bu using key:value pairs with the same name and then passing the balues through the parameters.
        Ex.
        function createStudent(name, id) {
            return {
                name: name,
                id: id
            };
        }
        let jimmy = createStudent("Jimmy W.", 123456);
        console.log(jimmy.name); // Jimmy W.
    Shorthand
        - This kind of function is so commonly used that there is shorthand for creating it.
        - If you omit the key, then it will make the key and value the same.
        Ex.
        function createStudent(name, id) {
            return {
                name,
                id
            };
        }
    The "in" Operator
        - You should always check to make sure that a key is in an object before calling it.
        - In order to do this we can use the in operator to check the key.
        Ex.
        "key" in object; // true or false
        Ex.
        "cash" in wallet; // false, if there is no cash in the wallet
    The "for...in" Loop
        - If you have an object that is filled with several properties that you would like to extract you may use a for in lopp.
        Ex.
        for(let key in wallet) {
            console.log(key); // card, cash
            console.log(wallet[key]); // "debit", 42
        }
    Ordering an Object
        - When you have a lot of numbers for keys in your object they will always be ordered least to greatest.
        Ex.
        let list = {
            5: 4,
            10: 3,
            2: 8,
            1: 1
        }
        console.log(list); /*
        '1': 1,
        '2': 8,
        '5': 4,
        '10': 3
        */
    Object Referencing
        - When you have a variable and your copy that variable into a new name then the value is copied and restored.
        - Objects instead only copy the reference address to where the value is being stored.
        - Therefore if your two objects are pointing to the smae vlaue, modifying one will modify both of them.
    Variable Referencing
        Ex.
        let first = 20;
        let second = first;
        first = 10;
        console.log(first); // 10
        console.log(second); // 20
    Object Referencing
        Ex.
        let first = (cash: 20);
        let second = first;
        first.cash = 10;
        console.log(first.cash); // 10
        console.log(second.cash); // 10
    Object Cloning
        - I have shown you before how to create a new obect using a function, but now I will show you how to clone and object like we do with a variable.
        - This is tricky since normally when we assign an object to and object we create a dependent clone.
    Object.assign
        - You can place any object into another creating a brand new independent object by using 'Object.assign'.
        Ex.
        Object.assign(destination, source1, source2, moreSources);
    Object Methods
        - We don't just have to add variables and objects to other objects, but we can also add functions.
        - When a function expression is added to an object as a property we call this a method.
    Methods
        Ex.
        user = {
            sayHi: function() {
                alert('Hello');
            }
        };
        user.sayHi(); // 'Hello'
        // User is and object and sayHi is the key associated with the function that will say hello.
    Method Shorthand
        Ex.
        // Same as "sayHi: function()"
        user = {
            sayHi() {
                alert('Hello');
            }
        };
        // This is the same as the last slide but written in shorthand.
        // Either way is fine, use the one that makes the most sense to you.
    this.Method
        - When using methods in an object it is usually required to use some value from inside of the object.
        - Since the object can be cloned or the method can be moved to another it's best to tell the method to use whatever object the method is in.
        - We do that with "this.key".
    Constructor Functions
        - A constructor function is a normal function that is used to create an object as many times as we want.
        Ex.
        function User(name, id) {
            this.name = name;
            this.id = id;
            this.admin = false;
        }
        -There are two conventions that make constructor functions stand out from a regular function.
            They have a capital first letter.
            They are obly executed with the "new" operator.
    Using the "new" Operator
        - From the constructor function we made earlier we can now create any user object we want.
        Ex.
        let tommy = new User('Tom', 12345);
        console.log(tommy.name); // 'Tom'
        console.log(tommy.id); // 12345
        console.log(tommy.admin); // false

Classes and Class Syntax:
    What is a class?
        - A class is essentially a function that provides better uses for constructing objects with values and methods.
    Proper "class" Syntax
        Ex.
        class MyClass {
            constructor() {
                // Defualt values
            }
            method1() {}
            method2() {}
            method3() {}
        }
        - Just as before the names of the constructor functions (the class) should start with a capital letter.
        - For a class the first method that you create should be the "constructor" method.
    Constructor Method
        - The constructor method is the first function called when creating an object with the "new" keyword.
        - If you do not define the constructor method it will still happen, but it will be an empty method.
        Ex.
        class Student {
            constructor(name, id, gradeLevel) {
                this.name = name;
                this.id = id;
                this.gradeLevel = gradeLevel;
                this.perm = 'Student';
            }
            checkPerm() {
                console.log(`The permission is ${this.perm}`);
            }
        }
    Getter and Setter Properties
        - You can add "get" to any of your methods to make sure that they can not be used to change a value.
        - You can use "set" if you want to create a method that is only used to update values.
        - The benefit of these is that they stop users/coders from using the methods incorrectly.
    Extending a Class
        - You can create "child classes" where they have all the same properties of the parent class and then you can define more.
        - I.e. if you have an animal and you make a cat subclass.
            They will share many properties with other animals, but you can add a few that only cats have, like lives.
    Extending a Function
        - You are allowed to extend any expression you want including functions, not just classes.
        - This is not as common but sometimes you need to create a class using a function, now you can extend it.
    Super Methods
        - Normally we don't want to overwrite a method when using it in a child class, but we do want to modify it.
        - To do this we use the "super.keyword" in order to refer to the parent class.
    Date Object
        - The date object is a built in object taht allows us to use time a buch of different way.
        - Normally we would need to create a ton of different methods to access the day or month or fine the time between days, now we don't have to.
    New Date
        - We create new dates just like any other object.
        Ex.
        let date = new Date():
        - Inside of the parameters you have some options.
            Milliseconds
            Datestring
            Year, month, date, hours, minutes, seconds, ms
                Only the year and month are required
    Milliseconds
        - If you are putting in milliseconds it is caclualted from Jan 1st 1970 at midnight (0:00).
        - (days * hours * minutes * seconds * 1000)
    Datestring
        - A string will be parsed automatically.
        Ex.
        Let date = new Date('2021-01-20');
        - If the time is not set it is assumed to be midnight GMT and is adjusted according to timezone. For instace:
            Thu Jan 20 2021 11:00:00 (Australia)
            Wed Jan 19 2021 16:00:00 (California)
    Year, month, date, ...
        - You can also createa date in the local time zone using just numbers.
            Year, just be 4 digits
            Month, starts at 0(Jan) and hoes to 11(Dec)
            Date, starts at 1
                If left blank, it is assumed 1
            Hours, minutes, seconds, ms
                All start at 0 and if they are left blank it is assumed
    Date Methods
        - getFullYear()
            Get the year in 4 digits
        - getMonth()
            Get the month from 0 to 11, January is 0
        - getDate()
            Get the dat of the month from 1 to 31
        - getHours, getMinutes, etc.
        - getDay()
            Will return the day of the week 0(sun) to 6(sat)
    Setting Date Components
        - You can also use all of the same methods with set instead.
    Auto Correcting
        - The date object also auto corrects errors for you
        Ex.
        let date = new Date(2013, 0, 23); // 23 Jan 2013 ?!?
        alert(date); // ...is 1st Feb 2013!
        - This is often used to find a time that is x minutes from the old time.
        Ex.
        let date = new Date();
        data.setSeconds(date.getSeconds() + 70);
        alert(date); // Shows the correct date
    Date.now()
        - Date.now()
        - This shows the current time on the device that you are using.
        - This is the saem as saying new Date().getTime() but saves your computer from creating a new date object.

Event Listeners and Event Handlers
    Events
        - An event is something happening on the page, normally this is cause by the user interacting with the page.
        - Every DOM node (elemnts/item) on the page genreate all of these signals, normally they are just set to do nothing.
    Event Listeners
        - In order to react to these signal we need to set up event listeners that will wait on the page until the event triggers.
        - We have been using on of them for a while now called 'onclick=""'.
    Common Mouse Events
        click - When the mouse is pressed and released on an element.
        contextmenu - When the mouse right-clicks on an element.
        mouseover/mouseout - When the mosue cursor moves over or leaves and element.
        mousedown/mouseup - When the mouse button is pressed / released over and element.
        mousemove - When the mosue is moved.
    Common Keyboard Events
        keydown - When the keyboard key is pressed.
        keyup - When the keyboard key is released.
    Common Form Element Events
        Submit - When you hit the submit button in the form.
        Focus - When the user selects and element on the form, such as an input box.
    Document / CSS Events
        DOMContentLoaded - When the HTML is loaded and the DOM is fully built.
        Transitioned - When a CSS animation finishes.
    Event Handlers
        - Once a listener activates from the user interacting you have to tell it how to act.
        - A handler will tell the event listener what to do once it notices that the event has happened.
    'this'
        - You can use 'this' and refer to the element that even is tied to.
        Ex.
        <button onclick="alert(this.innerHTML)">Click Me</button>
    'addEventListener'
        - The old way of adding an event will not allow you to add more than one function per action, instead use this.
        Ex.
        elemID.addEventListener(event, handler, [options]);
    'removeEventListener'
        - You can also remove any event listener you want by using this.
        Ex.
        elemID.removeEventListener(event, handler, [options]);
        - Since you may have more than one handler per event you will need to say the handler hat you wnat to remove every time.
    Shorthand
        - Since JS know that event listeners need to be added to and leement you cna use shortand and just say the id of the element without doing the jquery.
    Event Object
        - When an event happens on your page the browser creates and event object that stroes information about the event.
        - For example, what kind of event, what it clicked on, and relative position.
    Event Object Properties
        - There are a lot of properties that you can use from the event object.
        event.type - Will tell you what kind of action you are taking, right click, left click, etc.
        event.currentTarget - What you are clicking on.
        event.xlientX / event.clientY - Where you are clicking (px value).
    Giving Multiple Events
        - You can make a switch case where you can assign what should happen with each event.
        Ex.
        handleEvent (event) {
            switch (event.type) {
                case "mousedown":
                    elem.innerText = 'Mouse button pressed';
                    break;
                case "mouseup":
                    elem.innerText += '...and released.';
                    break;
            }
        }
    Affecting the Styles
        - Using hte "style.property" on the current target element will allow you to change the property to whatever you want.
        Ex.
        event.currentTarget.style.background = 'red';
    Adding Event in a "for" Loop
        - If you want to create a large group of divs that all have event listener you can add them with a loop, and save yourself some work.
    Creatiing Elements
        - You can use the document object to make new elements, not just read the elements on it.
        Ex.
        document.createElement('div');
        document.createElement('li');
    Appending Child
        - Once you have created and update the element that you want to add to the HTML, you can then take that element and add it to the HTML by appending the child of the parent element.
        Ex.
        parent.appendChild(child);
    Create, Add, Append, Repeat
        Ex.
        for(let i = 0; i < 9; i++) {
            let square = document.createElement('div');
            square.addEventListener('mouseover', testing);
            main.appendChild(square);
        }
    Transitions
        - There are a lot of different CSS animations that you can put on your work but the first one (and easiest one) that we are going to use is transition.
        - Every time a property changes on your CSS the transition will show the chance from one to the next.
        - Transition "all" will affect every kind of transition on that element.
        - "1s" means it will take 1 secodn to cause that transition.
        Ex.
        div {
            transition: all 1s;
        }
    Custom Cursors
        - THere rae a few ways to make a custom cursor on the screen, we are going to learn the simple way for now.
        - The cursor property is a way that we can change what the cursor looks like.
    Cursor Property
        - This will only work on the selector that you choose.
        Ex.
        div {
            cursor: url('cleat.png'), pointer;
        }