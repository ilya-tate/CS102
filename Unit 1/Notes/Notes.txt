OBJECT ORIENTED PROGRAMMING (OOP)
    Object oriented programming is a way of coding that allows you to create objects with properties that are cloned when you reference that object, so you don't have to type something over and over.


OOP Vocab:
    Encaspulation
        - The ability to store information inside of an object so that it is only visible to the object.
        Ex. interal computer components, gift in a box
    Abstraction
        - Hiding the internal mechanisms behind a simple interface.
        Ex. cable management, simple font
    Inheritance
        - Basing one object off another in order to retain similar implementation or properties.
        Ex. 
    Polymorphism
        - The ability to perform the same action in different ways (i.e. run() can be 2 legs or 4 legs).
        Ex. 

Objects and Object Based Programming:
    What is and Objects
        - An object (sometimes referred to as a class in other languages) is a data type just like strings and numbers but unlike those "primitive" data types they are used to store many values at once using keyed collections and more complex entries.
    How to Think About an Object
        - An object is like a wallet that stores all kinds of things. You may have aacard, that card is an ID or a debit card. You can have money which may be a single or a five. You can even use it to store things normally wouldn't go in a wallet, like lint or paper clips.
        Ex. In this example the wallet object is holding a card key with an ID value.
    How to Create an Object
        - An empty object is created using either an object constructor or and object literal.
        Ex.
        let wallet = new Object(); // This is and object constructor
        let wallet = {}; // This is and object literal
    Key:Value aka Properties
        - In order to save values in an object you need to assign them a key, kindo flike a name tag that you can refer to later to "get" the value back out.
        Ex.
        card: "Debit",
        cash: 42
        // Every key:value is seperated with a '","' and the key and value pair is seperated with a ':'.
    Assigning Values to Your Object
        - Now we can comine those two things and we end up with an object that is holding keys and values.
        Ex.
        let wallet = {
            card: "Debit",
            cash: 42
        };
    Reading Your Properties
        - In the wallet object that we made we can add, remove, and read any of the properties at any time.
        - The values are called by using the properties and keys that we defined.
        Ex.
        console.log(wallet.card); // Debit
        console.log(wallet.cash); // 42
    Adding New Properties
        - Just because a key was not added at creation, it does not mean that we can't add it later.
        - We can also add new properties similar to how we took the values out.
        Ex.
        wallet.ID = "School ID"
        console.log(wallet.ID); // School ID
    Removing Properties
        - Sometimes a card will expire, or be lost, or you will spend all your cash.
        - When this happens the property will need to be removed from the object.
        Ex.
        delete wallet.cash;
        - Rather than making the value 0 we can remove it entirely, sometimes this is preferable.
    Multi Word Properties
        - You may also use multi word properties.
        - The benefit is being able to express more complicated keys or to have a value that works easier with something a person would read.
        - This is very useful when creating databases or tables.
    Square Brackets
        - We can't add something like
            wallet.is poor = true
        - This will break the code so will
            wallet."is poor" = true
        - When creating mult word properties we need to use square brackets.
        Ex.
        wallet["is poor"] = true
        console.log(wallet ["is poor"]);
    Adding Through Prompts
        - Most likely youw ill not want to fill out an enitre object on your own, the code can do that for you.
        Ex.
        let wallet = {}
        let money = prompt("How much do you want to take out", "20");
        wallet["cash"] = money;
    Functions to Initialize/Clone
        - Many times when you want to create a new object you will pass it through a function.
        - This is best done bu using key:value pairs with the same name and then passing the balues through the parameters.
        Ex.
        function createStudent(name, id) {
            return {
                name: name,
                id: id
            };
        }
        let jimmy = createStudent("Jimmy W.", 123456);
        console.log(jimmy.name); // Jimmy W.
    Shorthand
        - This kind of function is so commonly used that there is shorthand for creating it.
        - If you omit the key, then it will make the key and value the same.
        Ex.
        function createStudent(name, id) {
            return {
                name,
                id
            };
        }
    The "in" Operator
        - You should always check to make sure that a key is in an object before calling it.
        - In order to do this we can use the in operator to check the key.
        Ex.
        "key" in object; // true or false
        Ex.
        "cash" in wallet; // false, if there is no cash in the wallet
    The "for...in" Loop
        - If you have an object that is filled with several properties that you would like to extract you may use a for in lopp.
        Ex.
        for(let key in wallet) {
            console.log(key); // card, cash
            console.log(wallet[key]); // "debit", 42
        }
    Ordering an Object
        - When you have a lot of numbers for keys in your object they will always be ordered least to greatest.
        Ex.
        let list = {
            5: 4,
            10: 3,
            2: 8,
            1: 1
        }
        console.log(list); /*
        '1': 1,
        '2': 8,
        '5': 4,
        '10': 3
        */
    Object Referencing
        - When you have a variable and your copy that variable into a new name then the value is copied and restored.
        - Objects instead only copy the reference address to where the value is being stored.
        - Therefore if your two objects are pointing to the smae vlaue, modifying one will modify both of them.
    Variable Referencing
        Ex.
        let first = 20;
        let second = first;
        first = 10;
        console.log(first); // 10
        console.log(second); // 20
    Object Referencing
        Ex.
        let first = (cash: 20);
        let second = first;
        first.cash = 10;
        console.log(first.cash); // 10
        console.log(second.cash); // 10
    Object Cloning
        - I have shown you before how to create a new obect using a function, but now I will show you how to clone and object like we do with a variable.
        - This is tricky since normally when we assign an object to and object we create a dependent clone.
    Object.assign
        - You can place any object into another creating a brand new independent object by using 'Object.assign'.
        Ex.
        Object.assign(destination, source1, source2, moreSources);
    Object Methods
        - We don't just have to add variables and objects to other objects, but we can also add functions.
        - When a function expression is added to an object as a property we call this a method.
    Methods
        Ex.
        user = {
            sayHi: function() {
                alert('Hello');
            }
        };
        user.sayHi(); // 'Hello'
        // User is and object and sayHi is the key associated with the function that will say hello.
    Method Shorthand
        Ex.
        // Same as "sayHi: function()"
        user = {
            sayHi() {
                alert('Hello');
            }
        };
        // This is the same as the last slide but written in shorthand.
        // Either way is fine, use the one that makes the most sense to you.
    this.Method
        - When using methods in an object it is usually required to use some value from inside of the object.
        - Since the object can be cloned or the method can be moved to another it's best to tell the method to use whatever object the method is in.
        - We do that with "this.key".
    Constructor Functions
        - A constructor function is a normal function that is used to create an object as many times as we want.
        Ex.
        function User(name, id) {
            this.name = name;
            this.id = id;
            this.admin = false;
        }
        -There are two conventions that make constructor functions stand out from a regular function.
            They have a capital first letter.
            They are obly executed with the "new" operator.
    Using the "new" Operator
        - From the constructor function we made earlier we can now create any user object we want.
        Ex.
        let tommy = new User('Tom', 12345);
        console.log(tommy.name); // 'Tom'
        console.log(tommy.id); // 12345
        console.log(tommy.admin); // false

Classes and Class Syntax:
    What is a class?
        - A class is essentially a function that provides better uses for constructing objects with values and methods.
    Proper "class" Syntax
        Ex.
        class MyClass {
            constructor() {
                // Defualt values
            }
            method1() {}
            method2() {}
            method3() {}
        }
        - Just as before the names of the constructor functions (the class) should start with a capital letter.
        - For a class the first method that you create should be the "constructor" method.
    Constructor Method
        - The constructor method is the first function called when creating an object with the "new" keyword.
        - If you do not define the constructor method it will still happen, but it will be an empty method.
        Ex.
        class Student {
            constructor(name, id, gradeLevel) {
                this.name = name;
                this.id = id;
                this.gradeLevel = gradeLevel;
                this.perm = 'Student';
            }
            checkPerm() {
                console.log(`The permission is ${this.perm}`);
            }
        }
    Getter and Setter Properties
        - You can add "get" to any of your methods to make sure that they can not be used to change a value.
        - You can use "set" if you want to create a method that is only used to update values.
        - The benefit of these is that they stop users/coders from using the methods incorrectly.